# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/user_injector.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
tests/wp_typed/user_injector.i:61:[wp] warning: Validity of unsized array not implemented yet (considered valid).
tests/wp_typed/user_injector.i:60:[wp] warning: Validity of unsized array not implemented yet (considered valid).
------------------------------------------------------------
  Function job
------------------------------------------------------------

Goal Post-condition 'SEQ' in 'job':
Let x = service_cpt_0 - 1.
Let x_1 = service_result_0[x].
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(job_0) /\ is_sint32(service_cpt_0) /\
      is_sint32(service_result_0[service_cpt_0]) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x) /\ IsArray1_sint32(m) /\
      is_sint32(x_1) /\ IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  If 0 != x_1
  Then {
    If 0 != service_result_0[service_cpt_0]
    Then { Have: 1 = job_0. }
    Else { Have: 0 = job_0. }
  }
  Else { Have: 0 = job_0. }
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ID1' in 'job':
Let x = service_result_0[service_cpt_0].
Let m = service_id_0[service_cpt_0 <- a].
Let x_1 = 1 + service_cpt_0.
Assume {
  Type: is_sint32(job_0) /\ is_sint32(service_cpt_0) /\ IsArray1_sint32(m) /\
      is_sint32(x) /\ is_sint32(service_cpt_0 - 1) /\ is_sint32(x_1) /\
      IsArray1_sint32(m[x_1 <- b]) /\ is_sint32(service_result_0[x_1]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  If 0 != x
  Then {
    If 0 != service_result_0[x_1]
    Then { Have: 1 = job_0. }
    Else { Have: 0 = job_0. }
  }
  Else { Have: 0 = job_0. }
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'ID2' in 'job':
Let x = service_result_0[service_cpt_0].
Let m = service_id_0[service_cpt_0 <- a].
Let x_1 = 1 + service_cpt_0.
Assume {
  Type: is_sint32(job_0) /\ is_sint32(service_cpt_0) /\ IsArray1_sint32(m) /\
      is_sint32(x) /\ is_sint32(service_cpt_0 - 1) /\ is_sint32(x_1) /\
      IsArray1_sint32(m[x_1 <- b]) /\ is_sint32(service_result_0[x_1]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  If 0 != x
  Then {
    If 0 != service_result_0[x_1]
    Then { Have: 1 = job_0. }
    Else { Have: 0 = job_0. }
  }
  Else { Have: 0 = job_0. }
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'R1' in 'job':
Let x = service_result_0[service_cpt_0].
Let x_1 = service_cpt_0 - 1.
Let x_2 = service_result_0[x_1].
Let m = service_id_0[x_1 <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(x) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x_1) /\ IsArray1_sint32(m) /\
      is_sint32(x_2) /\ IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  Have: 0 != x_2.
  Have: 0 != x.
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'R2' in 'job':
Let x = service_result_0[service_cpt_0].
Let x_1 = service_cpt_0 - 1.
Let x_2 = service_result_0[x_1].
Let m = service_id_0[x_1 <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(x) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x_1) /\ IsArray1_sint32(m) /\
      is_sint32(x_2) /\ IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  Have: 0 != x_2.
  Have: 0 != x.
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'R0' in 'job':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'E1' in 'job':
Let x = service_cpt_0 - 1.
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\
      is_sint32(service_result_0[service_cpt_0]) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x) /\ IsArray1_sint32(m) /\
      IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Goal *)
  When: 0 = service_result_0[x].
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
}
Prove: true.

------------------------------------------------------------

Goal Post-condition 'E2' in 'job':
Let x = service_cpt_0 - 1.
Let x_1 = service_result_0[x].
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(service_cpt_0 - 2) /\
      is_sint32(x) /\ IsArray1_sint32(m) /\ is_sint32(x_1) /\
      IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Goal *)
  When: (0 = service_result_0[service_cpt_0]) /\ (0 != x_1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (1/3):
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (2/3):
Effect at line 58
Assume {
  Type: is_sint32(Mint_0[error_0]).
  (* Goal *)
  When: valid_rd(Malloc_0, error_0, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (3/3):
Call Result at line 60
Assume { (* Heap *) Have: linked(Malloc_0) /\ (region(error_0.base) <= 0). }
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (1/9):
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (2/9):
Effect at line 58
Assume {
  Type: is_sint32(Mint_0[error_0]).
  (* Goal *)
  When: valid_rd(Malloc_0, error_0, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (3/9):
Call Result at line 60
Assume { (* Heap *) Have: linked(Malloc_0) /\ (region(error_0.base) <= 0). }
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (4/9):
Call Result at line 61
Assume { (* Heap *) Have: linked(Malloc_0) /\ (region(error_0.base) <= 0). }
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (5/9):
Effect at line 63
Let x = service_cpt_0 - 1.
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(Mint_0[error_0]) /\
      is_sint32(service_result_0[service_cpt_0]) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x) /\ IsArray1_sint32(m) /\
      IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Goal *)
  When: valid_rd(Malloc_0, error_0, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  (* Call 'service' *)
  Have: 0 = service_result_0[x].
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (6/9):
Effect at line 64
Let x = service_cpt_0 - 1.
Let x_1 = service_result_0[x].
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(Mint_0[error_0]) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x) /\ IsArray1_sint32(m) /\
      is_sint32(x_1) /\ IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Goal *)
  When: valid_rd(Malloc_0, error_0, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  (* Call 'service' *)
  Have: 0 = service_result_0[service_cpt_0].
  (* Else *)
  Have: 0 != x_1.
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (7/9):
Effect at line 66
Let x = service_result_0[service_cpt_0].
Let x_1 = service_cpt_0 - 1.
Let x_2 = service_result_0[x_1].
Let m = service_id_0[x_1 <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(x) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x_1) /\ IsArray1_sint32(m) /\
      is_sint32(x_2) /\ IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  (* Then *)
  Have: 0 != x_2.
  (* Then *)
  Have: 0 != x.
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (8/9):
Effect at line 66
Let x = service_cpt_0 - 1.
Let x_1 = service_result_0[x].
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\ is_sint32(service_cpt_0 - 2) /\
      is_sint32(x) /\ IsArray1_sint32(m) /\ is_sint32(x_1) /\
      IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  (* Call 'service' *)
  Have: 0 = service_result_0[service_cpt_0].
  (* Then *)
  Have: 0 != x_1.
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'A' in 'job' (9/9):
Effect at line 66
Let x = service_cpt_0 - 1.
Let m = service_id_0[x <- a].
Assume {
  Type: is_sint32(service_cpt_0) /\
      is_sint32(service_result_0[service_cpt_0]) /\
      is_sint32(service_cpt_0 - 2) /\ is_sint32(x) /\ IsArray1_sint32(m) /\
      IsArray1_sint32(m[service_cpt_0 <- b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(error_0.base) <= 0).
  (* Call 'service' *)
  Have: 0 = service_result_0[x].
}
Prove: true.

------------------------------------------------------------
