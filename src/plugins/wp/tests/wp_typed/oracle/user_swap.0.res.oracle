# frama-c -wp [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_typed/user_swap.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Collecting axiomatic usage
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file tests/wp_typed/user_swap.i, line 25):
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_typed/user_swap.i, line 6) in 'swap'' in 'main' at call 'swap' (file tests/wp_typed/user_swap.i, line 24)
:
Let x = Mint_0[shift_sint32(global(P_b_78), 0)].
Let x_1 = Mint_0[shift_sint32(global(P_a_77), 0)].
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Then *)
  Have: x <= x_1.
}
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file tests/wp_typed/user_swap.i, line 7) in 'swap'' in 'main' at call 'swap' (file tests/wp_typed/user_swap.i, line 24)
:
Let x = Mint_0[shift_sint32(global(P_b_78), 0)].
Let x_1 = Mint_0[shift_sint32(global(P_a_77), 0)].
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Then *)
  Have: x <= x_1.
}
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function swap
------------------------------------------------------------

Goal Post-condition 'A' in 'swap':
Let x = Mint_0[a].
Let x_1 = Mint_0[b].
Let x_2 = Mint_0[a <- x_1][b <- x][a].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, b, 1).
}
Prove: x_1 = x_2.

------------------------------------------------------------

Goal Post-condition 'B' in 'swap':
Let x = Mint_0[a].
Let x_1 = Mint_0[b].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(Mint_0[a <- x_1][b <- x][a]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, b, 1).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'E' in 'swap' (1/3):
Effect at line 15
Assume {
  Type: is_sint32(Mint_0[a]) /\ is_sint32(Mint_0[b]) /\
      is_sint32(Mint_1[a]) /\ is_sint32(Mint_1[b]).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, b, 1).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'E' in 'swap' (2/3):
Effect at line 16
Assume {
  Type: is_sint32(Mint_0[a]) /\ is_sint32(Mint_0[b]) /\
      is_sint32(Mint_1[a]) /\ is_sint32(Mint_1[b]).
  (* Goal *)
  When: valid_rd(Malloc_0, a, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, b, 1).
}
Prove: true.

------------------------------------------------------------

Goal Assigns 'E' in 'swap' (3/3):
Effect at line 17
Assume {
  Type: is_sint32(Mint_0[a]) /\ is_sint32(Mint_0[b]) /\
      is_sint32(Mint_1[a]) /\ is_sint32(Mint_1[b]).
  (* Goal *)
  When: valid_rd(Malloc_0, b, 1).
  (* Heap *)
  Have: linked(Malloc_0) /\ (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, b, 1).
}
Prove: true.

------------------------------------------------------------
